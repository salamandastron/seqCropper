now = bestCommunities[sorted.B$ix[1:13]][[4]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[5]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[6]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[7]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[8]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[9]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[10]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[11]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[12]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix[1:13]][[13]]
V(yeast)$Class[as.numeric(now)]
sum(V(yeast)$Class=="P")
which(V(yeast)$Class=="P")
length(which(V(yeast)$Class=="P"))
length(which(V(yeast)$Class=="B"))
length(which(V(yeast)$Class=="T"))
length(which(V(yeast)$Class=="F
"))
length(which(V(yeast)$Class=="F"))
length(which(V(yeast)$Class=="O"))
length(which(V(yeast)$Class=="D"))
length(which(V(yeast)$Class=="R"))
now = bestCommunities[sorted.B$ix[[14]]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[14]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[15]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[16]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[17]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[18]]
V(yeast)$Class[as.numeric(now)]
sorted.B$x
now = bestCommunities[sorted.B$ix][[70]]
sorted.B$x
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[49]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[33]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[36]]
V(yeast)$Class[as.numeric(now)]
now = bestCommunities[sorted.B$ix][[30]]
V(yeast)$Class[as.numeric(now)]
sqrt(adj.now)
edges = get.edgelist(yeast)
head(edges)
write.table("/Users/apple/R/testCommExtrPerformance/yeast.txt",sep="\t",col.names=FALSE,row.names=FALSE,quote=FALSE)
write.table(edges,"/Users/apple/R/testCommExtrPerformance/yeast.txt",sep="\t",col.names=FALSE,row.names=FALSE,quote=FALSE)
V(yeast)$names
V(yeast)$name
names = V(yeast)$name
labels = V(yeast)$Class
head(labels)
annot = yeast$Classes
annot
write.table(cbind(names,labels),"/Users/apple/R/testCommExtrPerformance/yeast_labels.txt",sep="\t",col.names=FALSE,row.names=FALSE,quote=FALSE)
for (x in 1:100) {}
sorted.B
V(yeast)[1]
sorted.B$ix[1]
bestCommunities[[sorted.B$ix[1]]]
as.numeric(bestCommunities[[sorted.B$ix[1]]])
for (x in 1:216) {
filename = paste("community_",as.character(x),".txt",sep="")
community = as.numeric(bestCommunities[[sorted.B$ix[x]]])
write.table(as.character(V(yeast)[community]),filename,sep="\t",col.names=FALSE,row.names=FALSE,quote=FALSE)
}
V(yeast)[1]
V(yeast)[1:10]
V(yeast)$name[1:10]
for (x in 1:216) {
filename = paste("/Users/apple/R/testCommExtrPerformance/community_",as.character(x),".txt",sep="")
community = as.numeric(bestCommunities[[sorted.B$ix[x]]])
write.table(as.character(V(yeast)$name[community]),filename,sep="\t",col.names=FALSE,row.names=FALSE,quote=FALSE)
}
require(goProfiles)
install.packages("goProfiles")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("goProfiles")
library(goProfiles)
library(goProfiles)
library('Go.db')
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite('GO.db')
library(goProfiles)
source("http://bioconductor.org/biocLite.R")
biocLite("ReportingTools")
library(goProfiles)
data(prostateIds)
prostateIds
welsh01EntrezIDs
biocLite("org.Hs.eg.db")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("org.Hs.eg.db")
library(org.Hs.eg.db)
x <- org.Hs.egSYMBOL
# Get the gene symbol that are mapped to an entrez gene identifiers
mapped_genes <- mappedkeys(x)
mapped_genes
mapped_genes[1]
mapped_genes[2]
xx <- as.list(x[mapped_genes])
head(xx)
which(xx==1)
x <- org.Hs.egSYMBOL2EG
# Get the entrez gene identifiers that are mapped to a gene symbol
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
head(xx)
xx$YGL123W
library(igraph)
rm(list=ls())
#dyn.load("/Users/apple/C_Cpp/localMoving.so")
dyn.load("/Users/apple/C_Cpp/commExtr.so")
dyn.load("/Users/apple/C_Cpp/computeB/border_score.so")
communityExtraction <- function(dim,popsize,adj,followup,ncores,verbose){
out <- .C("commextr",d=as.integer(dim),ps=as.integer(popsize),adjm=(as.vector(adj)),res=as.integer(as.vector(rep(0,dim))),f=as.integer(followup),n=as.integer(ncores),v=as.integer(verbose))
return(out$res)
}
library(igraphdata)
data(yeast)
g = yeast
res <- communityExtraction(dim=length(V(g)),popsize=50,adj=get.adjacency(g),followup=0,ncores=8,verbose=1)
require(igraph)
package.skeleton(name="commExtr",code_files="/Users/apple/R/commExtr/commExtr.R")
library(SSOAP)
library(RCurl)
SOAPServer("services.ensembl.org", "cgi-bin/ensembl_rpcrouter", 7070)
.SOAP(SOAPServer("services.xmethods.net", "soap"),
"getRate", country1="England", country2 = "Japan",
action="urn:xmethods-CurrencyExchange")
.SOAP(SOAPServer("services.xmethods.net", "soap/servlet/rpcrouter"),
"getPrice", "0596000278",
action="urn:xmethods-BNPriceCheck")
s <- SOAPServer("http://services.xmethods.net/soap")
.SOAP(s,
"getQuote", "AMZN",
action="urn:xmethods-delayed-quotes#getQuote")
.SOAP(SOAPServer("services.soaplite.com", "temper.cgi"),
"c2f", 37.5,
action="http://www.soaplite.com/Temperatures")
.SOAP(SOAPServer("services.soaplite.com", "temper.cgi"),
"c2f", 37.5,
action="http://www.soaplite.com/Temperatures")
.SOAP(SOAPServer("services.soaplite.com", "temper.cgi"),
"c2f", 40,
action="http://www.soaplite.com/Temperatures")
.SOAP(SOAPServer("services.soaplite.com", "temper.cgi"),
"c2f", 50,
action="http://www.soaplite.com/Temperatures")
kegg = processWSDL("http://soap.genome.jp/KEGG.wsdl")
# note that we force the use of the 1.1 name spaces to get arrays
# handled correctly on the server side.
iface = genSOAPClientInterface(def = kegg, nameSpaces = "1.1")
w = processWSDL("http://www.weather.gov/forecasts/xml/SOAP_server/ndfdXMLserver.php?wsdl")
f = genSOAPClientInterface(,w)
str = f@functions$NDFDgenByDay(38.9936, -77.0224, Sys.time() + 60*24*60, 5, "12 hourly")
library(XML)
xmlToList(xmlParse(str, asText = TRUE))
wsdl = "http://soap.genome.jp/KEGG.wsdl"
wsdl = "~/KEGG.wsdl"
library(SSOAP)
kegg <- processWSDL(wsdl)
wsdl = 'http://genecodis.cnb.csic.es/wsdl/GenecodisWS.wsdl'
processWSDL(wsdl)
u = "http://gisdata.usgs.gov/XMLWebServices/TNM_Elevation_service.asmx?WSDL"
w = processWSDL(u)
w
source("http://bioconductor.org/biocLite.R")
biocLite("SSOAP")
library(SSOAP)
tmp = processWSDL(system.file("examples", "KEGG.wsdl", package = "SSOAP"))
o = tmp@operations[[1]][["color_pathway_by_objects"]]
fix(w)
names(o@parameters)
o@parameters[["fg_color_list"]]
o@returnValue
ff = genSOAPClientInterface(tmp@operations[[1]], def = tmp, tmp@name, verbose=FALSE)
x = ff@functions$get_paralogs_by_gene("eco:b0002", 1, 10)
tp = get(".operation", environment(ff@functions$get_paralogs_by_gene))@returnValue
tp
wsdl = 'http://genecodis.cnb.csic.es/wsdl/GenecodisWS.wsdl'
tmp = processWSDL(wsdl)
library(XML)
tmp = processWSDL(wsdl)
?processWSDL
tmp = processWSDL(filename-wsdl)
tmp = processWSDL(filename=wsdl)
tmp = processWSDL(fileName=wsdl)
tmp = processWSDL(fileName=wsdl,verbose=T)
processWSDL
processWSDL()
getForm("http://www.google.com/search", hl="en", lr="", ie="ISO-8859-1",  q="RCurl", btnG="Search")
htmlTreeParse(getForm("http://www.google.com/search", hl="en", lr="", ie="ISO-8859-1",  q="RCurl", btnG="Search"))
tmp = processWSDL(fileName=wsdl)
tmp = processWSDL(fileName=wsdl,verbose=T)
wsdl ="/Users/apple/R/webAPI/GenecodisWS.wsdl"
tmp = processWSDL(fileName=wsdl,verbose=T)
?system.file
wsdl ="/Users/apple/R/webAPI/GenecodisWS.wsdl.txt"
tmp = processWSDL(fileName=wsdl,verbose=T)
tmp = processWSDL(fileName=wsdl,verbose=T)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=F
)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=F)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=3)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=2)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1.1)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1.2)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1.3)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1.4)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1.5)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=1L)
tmp = processWSDL(fileName=wsdl,verbose=T,useInternalNodes=T,port=2L)
ports
processWSDL
ports = getNodeSet(wsdl, "//w:service/w:port", c(w = "http://schemas.xmlsoap.org/wsdl/"))
ports = getNodeSet(wsdl, "//w:service/w:1", c(w = "http://schemas.xmlsoap.org/wsdl/"))
ports = getNodeSet(wsdl, "//w:service/w:1L", c(w = "http://schemas.xmlsoap.org/wsdl/"))
@
?"@"
xmlRoot(wsdl)
xmlroot(wsdl)
wsdl
wsdl ="http://genecodis.cnb.csic.es/wsdl/GenecodisWS.wsdl"
xmlRoot(wsdl)
wsdl = parseSchemaDoc(wsdl)
?parseSchemaDoc
??parseSchemaDoc
library(XMLSchema)
wsdl = parseSchemaDoc(wsdl)
wsdl
xmlRoot(wsdl)
processWSDL
r=xmlRoot(wsdl)
processTypes(r)
??processTypes
SSOAP::processTypes
namespace
namespaces
namespace
q()
library(Deducer)
library(JGR)
Sys.setenv(NOAWT=1)
library(JGR)
library(Deducer)
Sys.unsetenv("NOAWT")
library(Deducer)
#Some sample data to test against
x1 <- rnorm(100)
x2 <- runif(100)
#Widget labels
labelX <- "Variable name for data: "
labelY <- "Distribution to compare to: "
labelAlternative <- "One or two sided test?: "
labelP <- "The p-value is: "
#Choices for comboboxes
choicesAlternative <- eval(formals(ks.test)$alternative)
distributions <- c(
normal = pnorm,
exponential = pexp,
F = pf,
"log-normal" = plnorm,
"Student's t" = pt,
uniform = punif
)
createKsTestDeducer <- function()
{
library(Deducer)
win <- new(RDialog)
win$setSize(300L, 500L)
win$setTitle("KS TEST, Deducer edition")
JLabel <- J("javax.swing.JLabel")
lblX <- new(JLabel, labelX)
addComponent(win, lblX, 1, 1000, 50, 1, rightType = "REL")
txtX <- new(TextAreaWidget, "x")
addComponent(win, txtX, 51, 1000, 150, 1, rightType = "REL")
lblY <- new(JLabel, labelY)
addComponent(win, lblY, 151, 1000, 200, 1, rightType = "REL")
cmbY <- new(ComboBoxWidget, names(distributions))
cmbY$setDefaultModel(names(distributions)[1])
addComponent(win, cmbY, 201, 1000, 300, 1, rightType = "REL")
lblAlternative <- new(JLabel, labelAlternative)
addComponent(win, lblAlternative, 301, 1000, 400, 1, rightType = "REL")
cmbAlternative <- new(ComboBoxWidget, choicesAlternative)
cmbAlternative$setDefaultModel(choicesAlternative[1])
addComponent(win, cmbAlternative, 401, 1000, 500, 1, rightType = "REL")
JButton <- J("javax.swing.JButton")
btnCalc <- new(JButton, "Calculate")
addComponent(win, btnCalc, 501, 1000, 601, 1, rightType = "REL")
ActionListener <- J("org.rosuda.deducer.widgets.event.RActionListener")
listener <- new(ActionListener)
calculationHandler <- function(cmd, ActionEvent)
{
x <- get(txtX$getText())
y <- distributions[[cmbY$getModel()]]
alternative <- cmbAlternative$getModel()
ans <- ks.test(x, y, alternative = alternative)
print(ans)
txtP$setText(format(ans$p.value, digits = 3))
}
listener$setFunction(toJava(calculationHandler))
btnCalc$addActionListener(listener)
lblP <- new(JLabel, labelP)
addComponent(win, lblP, 601, 1000, 650, 1, rightType = "REL")
txtP <- new(TextAreaWidget, "results")
addComponent(win, txtP, 651, 1000, 750, 1, rightType = "REL")
win$run()
}
createKsTestDeducer()
#make dialog
dialog <- new(SimpleRDialog)
dialog$setSize(500L,400L)
dialog$setTitle("Factor Analysis")
#add variable selector
variableSelector <- new(VariableSelectorWidget)
variableSelector$setTitle("data")
addComponent(dialog,variableSelector,10,400,850,10)
#add a list for the variables
variableList<- new(VariableListWidget,variableSelector)
variableList$setTitle("variables")
addComponent(dialog, variableList,100,900,450, 420)
#options for transforming the variables
transBoxes <- new(CheckBoxesWidget,"Transformation",c("Center","Scale"))
addComponent(dialog, transBoxes,500,900,670, 540)
transBoxes$setDefaultModel(c("Scale"))
#output options
outBoxes <- new(CheckBoxesWidget,"Output",c("Summary","Scree Plot"))
addComponent(dialog, outBoxes,680,900,850, 540)
dialog$run()
#make dialog
dialog <- new("SimpleRDialog")
dialog$setSize(500L,400L)
dialog$setTitle("Factor Analysis")
#add variable selector
variableSelector <- new(VariableSelectorWidget)
variableSelector$setTitle("data")
addComponent(dialog,variableSelector,10,400,850,10)
#add a list for the variables
variableList<- new(VariableListWidget,variableSelector)
variableList$setTitle("variables")
addComponent(dialog, variableList,100,900,450, 420)
#options for transforming the variables
transBoxes <- new(CheckBoxesWidget,"Transformation",c("Center","Scale"))
addComponent(dialog, transBoxes,500,900,670, 540)
transBoxes$setDefaultModel(c("Scale"))
#output options
outBoxes <- new(CheckBoxesWidget,"Output",c("Summary","Scree Plot"))
addComponent(dialog, outBoxes,680,900,850, 540)
dialog$run()
SciViewsPackages <- c("SciViews", "svMisc", "svSocket", "svGUI", "svIDE",
"svKomodo", "svDialogs", "svSweave", "svTools", "svUnit", "svWidgets", "tcltk2")
install.packages(SciViewsPackages)
library(svDialogs)
display(guiDlg("SciViews-R", "My first dialog box with SciViews-R"))
#Some sample data to test against
x1 <- rnorm(100)
x2 <- runif(100)
#Widget labels
labelX <- "Variable name for data: "
labelY <- "Distribution to compare to: "
labelAlternative <- "One or two sided test?: "
labelP <- "The p-value is: "
#Choices for comboboxes
choicesAlternative <- eval(formals(ks.test)$alternative)
distributions <- c(
normal = pnorm,
exponential = pexp,
F = pf,
"log-normal" = plnorm,
"Student's t" = pt,
uniform = punif
)
createKsTestGwidgets <- function()
{
library(gWidgetstcltk)
options(guiToolkit = "tcltk")
win <- gwindow("KS Test, gWidgets edition", visible = FALSE)
frmX <- gframe("x", container = win)
lblX <- glabel(labelX, container = frmX)
txtX <- gedit(container = frmX)
frmY <- gframe("y", container = win)
lblY <- glabel(labelY, container = frmY)
cmbY <- gcombobox(names(distributions), container = frmY)
frmAlternative <- gframe("alternative", container = win)
lblAlternative <- glabel(labelAlternative, container = frmAlternative)
cmbAlternative <- gcombobox(choicesAlternative, container = frmAlternative)
btnCalc <- gbutton("Calculate", container = win,
handler = function(h, ...)
{
x <- get(svalue(txtX), mode = "numeric")
y <- distributions[[svalue(cmbY)]]
alternative <- svalue(cmbAlternative)
ans <- ks.test(x, y, alternative = alternative)
svalue(txtP) <- format(ans$p.value, digits = 3)
}
)
frmResults <- gframe("results", container = win)
lblP <- glabel(labelP, container = frmResults)
txtP <- gedit(container = frmResults)
visible(win) <- TRUE
}
createKsTestGwidgets()
install.packages("RGtk2")
library(RGtk2)
library(RGtk2)
library(RGtk2)
install.packages("RGtk2")
install.packages("RGtk2")
library(RGtk2)
library(RGtk2)
demo(appWindow)
demo(package="RGtk2")
library(igraph)
win = gtkWindow()
library(gWidgets)
library(gWidgetstcltk)
win <- gwindow("Tab delimited file upload example")
grp_name <- ggroup(container = win)
lbl_data_frame_name <- glabel(
"Variable to save data to: ",
container = grp_name
)
txt_data_frame_name <- gedit("dfr", container = grp_name)
grp_upload <- ggroup(container = win)
use_comma_for_decimal <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = use_comma_for_decimal(),
container = grp_upload
)
status_bar <- gstatusbar("", container = win)
btn_upload <- gbutton(
text      = "Upload tab delimited file",
container = grp_upload,
handler   = function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
)
lmwidget <- ggenericwidget(lm)
head(dfr)
install.packages("RGG",repos="http://R-forge.R-project.org")
library(JGR
)
install.packages("RGG",repos="http://R-forge.R-project.org")
library(tcltk)
demo(package = "tcltk")
tcltk")
> d
)\
sdf
;
)
>
dsafadfs
f
adsf
dsa
dsf
library(shiny)
library(shinyIncubator)
setwd("/Users/apple/Data/glioma")
runApp("GUI")
library(shiny)
library(shinyIncubator)
setwd("/Users/apple/Data/glioma")
runApp("GUI")
