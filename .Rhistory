circle(hg19sub, geom = "text", aes(label = seqnames), vjust = 0, size = 3)
p
p <- ggbio(trackWidth = 10, buffer = 0, radius = 10) + circle(hg19sub, geom = "ideo", fill = "gray70") +
circle(hg19sub, geom = "scale", size = 2) +
circle(hg19sub, geom = "text", aes(label = seqnames), vjust = 0, size = 3)
p
head(mut.gr)
p <- ggbio() + circle(mut.gr, geom = "rect", color = "steelblue") +
circle(hg19sub, geom = "ideo", fill = "gray70") +
circle(hg19sub, geom = "scale", size = 2) +
circle(hg19sub, geom = "text", aes(label = seqnames), vjust = 0, size = 3)
p
gr.crc1 <- crc.gr[values(crc.gr)$individual == "CRC-1"]
p <- p + circle(gr.crc1, geom = "point", aes(y = score, size = tumreads),
color = "red", grid = TRUE, radius = 30) + scale_size(range = c(1, 2.5))
p
p <- p + circle(gr.crc1, geom = "link", linked.to = "to.gr", aes(color = rearrangements),radius = 23)
p
p <- ggbio() +
circle(gr.crc1, geom = "link", linked.to = "to.gr", aes(color = rearrangements)) +
circle(gr.crc1, geom = "point", aes(y = score, size = tumreads),
color = "red", grid = TRUE) + scale_size(range = c(1, 2.5)) +
circle(mut.gr, geom = "rect", color = "steelblue") +
circle(hg19sub, geom = "ideo", fill = "gray70") +
circle(hg19sub, geom = "scale", size = 2) +
circle(hg19sub, geom = "text", aes(label = seqnames), vjust = 0, size = 3)
p
grl <- split(crc.gr, values(crc.gr)$individual)
## need "unit", load grid
library(grid)
crc.lst <- lapply(grl, function(gr.cur){
print(unique(as.character(values(gr.cur)$individual)))
cols <- RColorBrewer::brewer.pal(3, "Set2")[2:1]
names(cols) <- c("interchromosomal", "intrachromosomal")
p <- ggbio() + circle(gr.cur, geom = "link", linked.to = "to.gr",
aes(color = rearrangements)) +
circle(hg19sub, geom = "ideo",
color = "gray70", fill = "gray70") +
scale_color_manual(values = cols) +
labs(title = (unique(values(gr.cur)$individual))) +
theme(plot.margin = unit(rep(0, 4), "lines"))
})
arrangeGrobByParsingLegend(crc.lst, widths = c(4, 1), legend.idx = 1, ncol = 3)
wh
wh <- genesymbol[c("PHF6")]
wh <- range(wh, ignore.strand = TRUE)
wh
p.txdb <- autoplot(Homo.sapiens, which = wh)
p.txdb
p.txdb <- autoplot(Mus.musculus, which = wh)
library(Mus.musculus)
p.txdb <- autoplot(Mus.musculus, which = wh)
head(genesymbol)
dim(genesymbol)
length(genesymbol)
class(Mus.musculus)
autoplot(Homo.sapiens, which = wh, gap.geom = "chevron")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
biocLite("TxDb.Mmusculus.UCSC.mm10.ensGene")
library(TxDb.Mmusculus.UCSC.mm10.ensGene)
txdb <- TxDb.Mmusculus.UCSC.mm10.ensGene
txdb
autoplot(txdb, which = wh)
wh
df <- data.frame(chr="chr1", start=11:13, end=12:14,
strand=c("+","-","+"), score=1:3)
makeGRangesFromDataFrame(df)
df
df <- data.frame(chr="chrX", start=52912266, end=52956943,
strand=c("+"))
makeGRangesFromDataFrame(df)
wh = makeGRangesFromDataFrame(df)
autoplot(txdb, which = wh)
reqLibs <- c("ChIPpeakAnno","biomaRt","BSgenome","XML","ggplot2",
"TxDb.Hsapiens.UCSC.hg38.knownGene","TxDb.Mmusculus.UCSC.mm10.knownGene","ggbio","biovizBase"
#              ,"BSgenome.Hsapiens.NCBI.GRCh38",
#              "BSgenome.Mmusculus.UCSC.mm9",
#              "BSgenome.Mmusculus.UCSC.mm10",
#              "BSgenome.Hsapiens.UCSC.hg18",
#              "BSgenome.Hsapiens.UCSC.hg19"
)
cat("Checking status of required packages and reference genomes...\n")
if (length(intersect(reqLibs,installed.packages()[,1])) < length(reqLibs)) {
cat("Installing genomes and required packages...\n")
#cat("If this is the first time you are using me, it might take a while to load all the stuff. We are working with genomes after all...")
aaa = installed.packages()
biocLite(setdiff(reqLibs,as.character(aaa[,1])))
}
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
autoplot(txdb, which = wh)
reqLibs <- c("ChIPpeakAnno","biomaRt","BSgenome","XML","ggplot2",
"TxDb.Hsapiens.UCSC.hg38.ensGene","TxDb.Mmusculus.UCSC.mm10.ensGene","ggbio","biovizBase"
#              ,"BSgenome.Hsapiens.NCBI.GRCh38",
#              "BSgenome.Mmusculus.UCSC.mm9",
#              "BSgenome.Mmusculus.UCSC.mm10",
#              "BSgenome.Hsapiens.UCSC.hg18",
#              "BSgenome.Hsapiens.UCSC.hg19"
)
cat("Checking status of required packages and reference genomes...\n")
if (length(intersect(reqLibs,installed.packages()[,1])) < length(reqLibs)) {
cat("Installing genomes and required packages...\n")
#cat("If this is the first time you are using me, it might take a while to load all the stuff. We are working with genomes after all...")
aaa = installed.packages()
biocLite(setdiff(reqLibs,as.character(aaa[,1])))
}
drawGene <- function(gene, sp) {
if (sp == "Human") {
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
} else {
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
}
autoplot(txdb, which = wh)
}
autoplot(txdb, which = wh)
getTSS <- function(gene,earliest=T,mart,idtype) {
#cat(".")
gb <- getBM(attributes=c('transcription_start_site',
'transcription_end_site',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
TSSList <- gb$transcription_start_site
TESList <- gb$transcription_end_site
TSSOrder <- order(TSSList,decreasing=F)
if (strandSign == "1") {
if (earliest) {
chr <- gb$chromosome_name[1]
startPos <- TSSList[TSSOrder[1]]
endPos <- TESList[TSSOrder[1]]
} else {
chr <- gb$chromosome_name[1]
startPos <- TSSList
endPos <- TESList
}
} else {
if (earliest) {
chr <- gb$chromosome_name[1]
startPos <- TSSList[length(TSSOrder)]
endPos <- TESList[length(TSSOrder)]
} else {
chr <- gb$chromosome_name[1]
startPos <- TSSList
endPos <- TESList
}
}
list(TSS=startPos,TES=endPos,chr=chr,strand=strandSign)
}
currmart <- useMart("ensembl", dataset = 'mmusculus_gene_ensembl')
cccc=getTSS("Myc",currmart,"hgnc_symbol")
currmart
cccc=getTSS("Myc",mart=currmart,"hgnc_symbol")
cccc=getTSS("Myc",mart=currmart,idtype="hgnc_symbol")
la = listAttributes(currmart)
la[grep("end",la$description),]
la[grep("term",la$description),]
la[grep("transcription",la$description),]
la[grep("Transcription",la$description),]
la[grep("Gene",la$description),]
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
if (strandSign == "1") {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
} else {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$end_position
endPos <- gb$start_position
}
list(chr=chr,start=startPos,end=endPos,strand=strand)
}
getGenePos("Myc",currmart,"hgnc_symbol")
getGenePos("Myc",currmart,"hgnc_symbol")
gene="Myc"
mart=currmart
idtype="hgnc_symbol"
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
gb
gene="MYC"
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
gb
currmart
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=currmart)
gb
idtype
gene
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values="PHF6", mart=currmart)
gb
gb <- getBM(attributes=c('transcription_start_site',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
mart
gb
gb <- getBM(attributes=c('ensembl_gene_id','ensembl_exon_id','rank',
"exon_chrom_start","exon_chrom_end","gene_exon","strand"),
filters = idtype, values=gene, mart=mart,
bmHeader=TRUE)
gb
source("http://bioconductor.org/biocLite.R")
#biocLite()
reqLibs <- c("ChIPpeakAnno","biomaRt","BSgenome","XML","ggplot2",
"TxDb.Hsapiens.UCSC.hg38.knownGene","TxDb.Mmusculus.UCSC.mm10.knownGene","ggbio","biovizBase"
#              ,"BSgenome.Hsapiens.NCBI.GRCh38",
#              "BSgenome.Mmusculus.UCSC.mm9",
#              "BSgenome.Mmusculus.UCSC.mm10",
#              "BSgenome.Hsapiens.UCSC.hg18",
#              "BSgenome.Hsapiens.UCSC.hg19"
)
cat("Checking status of required packages and reference genomes...\n")
if (length(intersect(reqLibs,installed.packages()[,1])) < length(reqLibs)) {
cat("Installing genomes and required packages...\n")
#cat("If this is the first time you are using me, it might take a while to load all the stuff. We are working with genomes after all...")
aaa = installed.packages()
biocLite(setdiff(reqLibs,as.character(aaa[,1])))
}
if (!("mailR" %in% installed.packages()[,1])) {
install.packages("mailR")
}
cat("Required packages ready.\n\nPipeline ready to run.\n")
library(ChIPpeakAnno)
library(biomaRt)
library(mailR)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ggplot2)
library(ggbio)
getTSS <- function(gene,earliest=T,mart,idtype) {
#cat(".")
gb <- getBM(attributes=c('transcription_start_site',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
TSSList <- gb$transcription_start_site
#TESList <- gb$transcription_end_site
TSSOrder <- order(TSSList,decreasing=F)
if (strandSign == "1") {
if (earliest) {
chr <- gb$chromosome_name[1]
startPos <- TSSList[TSSOrder[1]]
#endPos <- TESList[TSSOrder[1]]
} else {
chr <- gb$chromosome_name[1]
startPos <- TSSList
#endPos <- TESList
}
} else {
if (earliest) {
chr <- gb$chromosome_name[1]
startPos <- TSSList[length(TSSOrder)]
#endPos <- TESList[length(TSSOrder)]
} else {
chr <- gb$chromosome_name[1]
startPos <- TSSList
#endPos <- TESList
}
}
list(TSS=startPos,chr=chr,strand=strandSign)
}
currmart <- useMart("ensembl", dataset = 'mmusculus_gene_ensembl')
getTSS("MYC",mart=currmart,idtype="mgi_symbol")
getTSS("MYC",mart=currmart,idtype="hgnc_symbol")
getTSS("MYC",mart=currmart,idtype="hgnc_symbol")
getTSS("MYC",mart=currmart,idtype="mgi_symbol")
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
if (strandSign == "1") {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
} else {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$end_position
endPos <- gb$start_position
}
list(chr=chr,start=startPos,end=endPos,strand=strand)
}
getTSS("MYC",mart=currmart,idtype="mgi_symbol")
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
if (strandSign == "1") {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
} else {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$end_position
endPos <- gb$start_position
}
list(chr=chr,start=startPos,end=endPos,strand=strand)
}
getGenePos("MYC",currmart,"mgi_symbol")
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
if (strandSign == "1") {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
strnd <- "+"
} else {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$end_position
endPos <- gb$start_position
strnd <- "-"
}
list(chr=chr,start=startPos,end=endPos,strand=strnd)
}
getGenePos("MYC",currmart,"mgi_symbol")
cbind.data.frame(getGenePos("MYC",currmart,"mgi_symbol"))
makeGRangesFromDataFrame(cbind.data.frame(getGenePos("MYC",currmart,"mgi_symbol")))
drawGene <- function(gene,mart,sp,idtype) {
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos(gene,mart,idtype)))
if (sp == "Human") {
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
} else {
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
}
autoplot(txdb, which = genePos)
}
drawGene("MYC",currmart,"Human","mgi_symbol")
?crunch
library(biovizBase)
gr.txdb <- crunch(txdb, which = wh)
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
gr.txdb <- crunch(txdb, which = wh)
wh=makeGRangesFromDataFrame(cbind.data.frame(getGenePos("MYC",currmart,"mgi_symbol")))
gr.txdb <- crunch(txdb, which = wh)
gr.txdb
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
grl
autoplot(grl)
autoplot(grl, aes(type = model))
ggplot() + geom_alignment(grl, type = "model")
aaa = listAttributes(currmart)
aaa[grep("start",aaa$name),]
grl
wh
wh=makeGRangesFromDataFrame(cbind.data.frame(getGenePos("PHF6",currmart,"mgi_symbol")))
gr.txdb <- crunch(txdb, which = wh)
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
## fake some randome names
names(grl) <- sample(LETTERS, size = length(grl), replace = TRUE)
grl
autoplot(grl, aes(type = model))
ggplot() + geom_alignment(grl, type = "model")
autoplot(grl, aes(type = model))
wh=makeGRangesFromDataFrame(cbind.data.frame(getGenePos("Myc",currmart,"mgi_symbol")))
gr.txdb <- crunch(txdb, which = wh)
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
## fake some randome names
names(grl) <- sample(LETTERS, size = length(grl), replace = TRUE)
grl
autoplot(grl, aes(type = model))
drawGene <- function(gene,mart,sp,idtype) {
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos(gene,mart,idtype)))
if (sp == "Human") {
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
} else {
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
}
gr.txdb <- crunch(txdb, which = genePos)
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
autoplot(grl, aes(type = model))
}
drawGene("Myc",currmart,"Mouse","mgi_symbol")
drawGene <- function(gene,mart,sp,idtype) {
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos(gene,mart,idtype)))
if (sp == "Human") {
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
} else {
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
}
gr.txdb <- crunch(txdb, which = genePos)
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
names(grl) <- sapply(c(1:length(table(gr.txdb$tx_id))),function(x){
paste(gene,"_transcript_",as.character(x))
})
autoplot(grl, aes(type = model))
}
drawGene("Myc",currmart,"Mouse","mgi_symbol")
drawGene <- function(gene,mart,sp,idtype) {
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos(gene,mart,idtype)))
if (sp == "Human") {
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
} else {
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
}
gr.txdb <- crunch(txdb, which = genePos)
colnames(values(gr.txdb))[4] <- "model"
grl <- split(gr.txdb, gr.txdb$tx_id)
names(grl) <- sapply(c(1:length(table(gr.txdb$tx_id))),function(x){
paste0(gene,"_transcript_",as.character(x))
})
autoplot(grl, aes(type = model))
}
drawGene("PHF6",currmart,"Mouse","mgi_symbol")
####### Please un-comment the following lines if you do not have ######
####### the specified packages installed. #############################
# source("http://bioconductor.org/biocLite.R")
# biocLite("RCytoscape")
# install.packages("igraph")
# install.packages("shiny")
# install.packages("devtools")
# devtools::install_github("shiny-incubator", "rstudio")
library(shiny)
#library(shinyIncubator)
setwd("~/Tools/genomics/seqCropper/")
runApp("GUI")
####### Please un-comment the following lines if you do not have ######
####### the specified packages installed. #############################
# source("http://bioconductor.org/biocLite.R")
# biocLite("RCytoscape")
# install.packages("igraph")
# install.packages("shiny")
# install.packages("devtools")
# devtools::install_github("shiny-incubator", "rstudio")
library(shiny)
#library(shinyIncubator)
setwd("~/Tools/genomics/seqCropper/")
runApp("GUI")
drawGene("MAD",currmart,"Human","hgnc_symbol")
getGenePos("MAD",currmart,"hgnc_symbol")
currmart
currmart <- useMart("ensembl", dataset = 'hsapiens_gene_ensembl')
getGenePos("MAD",currmart,"hgnc_symbol")
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters="hgnc_symbol", values="MAD", mart=currmart)
gb
currmart
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters="hgnc_symbol", values="MYC", mart=currmart)
gb
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters="hgnc_symbol", values="MXD1", mart=currmart)
gb
runApp("GUI")
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters="hgnc_symbol", values="POU5F1", mart=currmart)
gb
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos("POU5F1",currmart,"hgnc_symbol")))
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
gb <- gb[-grep("CHR_",gb$chromosome_name,fixed=T),]
if (strandSign == "1") {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
strnd <- "+"
} else {
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$end_position
endPos <- gb$start_position
strnd <- "-"
}
list(chr=chr,start=startPos,end=endPos,strand=strnd)
}
genePos <- makeGRangesFromDataFrame(cbind.data.frame(getGenePos("POU5F1",currmart,"hgnc_symbol")))
getGenePos("POU5F1",currmart,"hgnc_symbol")
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters="hgnc_symbol", values="POU5F1", mart=currmart)
gb
getGenePos <- function(gene,mart,idtype) {
gb <- getBM(attributes=c('start_position','end_position',
'chromosome_name','strand'),
filters=idtype, values=gene, mart=mart)
strandSign <- as.character(gb$strand[1])
gb <- gb[-grep("CHR_",gb$chromosome_name,fixed=T),]
chr <- paste0("chr",gb$chromosome_name[1])
startPos <- gb$start_position
endPos <- gb$end_position
if (strandSign == "1") {
strnd <- "+"
} else {
strnd <- "-"
}
list(chr=chr,start=startPos,end=endPos,strand=strnd)
}
getGenePos("POU5F1",currmart,"hgnc_symbol")
drawGene("POU5F1",currmart,"Human","hgnc_symbol")
runApp("GUI")
